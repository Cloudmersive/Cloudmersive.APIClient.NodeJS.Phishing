/*
 * phishingapi
 * Easily and directly scan and block phishing security threats in input.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.46
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudmersivePhishingapiClient);
  }
}(this, function(expect, CloudmersivePhishingapiClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudmersivePhishingapiClient.PhishingDetectionApi();
  });

  describe('(package)', function() {
    describe('PhishingDetectionApi', function() {
      describe('phishingDetectEmailAdvancedPost', function() {
        it('should call phishingDetectEmailAdvancedPost successfully', function(done) {
          // TODO: uncomment, update parameter values for phishingDetectEmailAdvancedPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new CloudmersivePhishingapiClient.AdvancedEmailDetectionRequest();
          opts.body.fromEmailAddress = "";
          opts.body.toEmailAddress = "";
          opts.body.subject = "";
          opts.body.htmlBody = "";
          opts.body.allowLowReputationSenders = false;
          opts.body.allowSanctioned = false;
          opts.body.inputEmailFile = ""undefined;

          instance.phishingDetectEmailAdvancedPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CloudmersivePhishingapiClient.PhishingDetectionEmailAdvancedResponse);
            expect(data.cleanResult).to.be.a('boolean');
            expect(data.cleanResult).to.be(false);
            expect(data.phishingRiskLevel).to.be.a('number');
            expect(data.phishingRiskLevel).to.be(0.0);
            expect(data.spamRiskLevel).to.be.a('number');
            expect(data.spamRiskLevel).to.be(0.0);
            expect(data.containsLowReputationSender).to.be.a('boolean');
            expect(data.containsLowReputationSender).to.be(false);
            expect(data.containsPhishing).to.be.a('boolean');
            expect(data.containsPhishing).to.be(false);
            expect(data.containsSpam).to.be.a('boolean');
            expect(data.containsSpam).to.be(false);
            expect(data.containsUnsolicitedSales).to.be.a('boolean');
            expect(data.containsUnsolicitedSales).to.be(false);
            expect(data.containsPromotionalContent).to.be.a('boolean');
            expect(data.containsPromotionalContent).to.be(false);
            expect(data.containsPhishingAttempt).to.be.a('boolean');
            expect(data.containsPhishingAttempt).to.be(false);
            expect(data.analysisRationale).to.be.a('string');
            expect(data.analysisRationale).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('phishingDetectFileAdvancedPost', function() {
        it('should call phishingDetectFileAdvancedPost successfully', function(done) {
          // TODO: uncomment, update parameter values for phishingDetectFileAdvancedPost call and complete the assertions
          /*
          var opts = {};
          opts.model = "Advanced";
          opts.inputFile = "/path/to/file.txt";

          instance.phishingDetectFileAdvancedPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CloudmersivePhishingapiClient.PhishingDetectionAdvancedResponse);
            expect(data.cleanResult).to.be.a('boolean');
            expect(data.cleanResult).to.be(false);
            expect(data.phishingRiskLevel).to.be.a('number');
            expect(data.phishingRiskLevel).to.be(0.0);
            expect(data.analysisRationale).to.be.a('string');
            expect(data.analysisRationale).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('phishingDetectFilePost', function() {
        it('should call phishingDetectFilePost successfully', function(done) {
          // TODO: uncomment, update parameter values for phishingDetectFilePost call and complete the assertions
          /*
          var opts = {};
          opts.model = "Advanced";
          opts.inputFile = "/path/to/file.txt";

          instance.phishingDetectFilePost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CloudmersivePhishingapiClient.PhishingDetectionResponse);
            expect(data.cleanResult).to.be.a('boolean');
            expect(data.cleanResult).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('phishingDetectTextStringAdvancedPost', function() {
        it('should call phishingDetectTextStringAdvancedPost successfully', function(done) {
          // TODO: uncomment, update parameter values for phishingDetectTextStringAdvancedPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new CloudmersivePhishingapiClient.PhishingDetectionAdvancedRequest();
          opts.body.inputString = "";
          opts.body.model = "";

          instance.phishingDetectTextStringAdvancedPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CloudmersivePhishingapiClient.PhishingDetectionAdvancedResponse);
            expect(data.cleanResult).to.be.a('boolean');
            expect(data.cleanResult).to.be(false);
            expect(data.phishingRiskLevel).to.be.a('number');
            expect(data.phishingRiskLevel).to.be(0.0);
            expect(data.analysisRationale).to.be.a('string');
            expect(data.analysisRationale).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
