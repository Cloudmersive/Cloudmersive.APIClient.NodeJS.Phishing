/*
 * phishingapi
 * Easily and directly scan and block phishing security threats in input.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.46
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudmersivePhishingapiClient);
  }
}(this, function(expect, CloudmersivePhishingapiClient) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('AdvancedEmailDetectionRequest', function() {
      beforeEach(function() {
        instance = new CloudmersivePhishingapiClient.AdvancedEmailDetectionRequest();
      });

      it('should create an instance of AdvancedEmailDetectionRequest', function() {
        // TODO: update the code to test AdvancedEmailDetectionRequest
        expect(instance).to.be.a(CloudmersivePhishingapiClient.AdvancedEmailDetectionRequest);
      });

      it('should have the property fromEmailAddress (base name: "FromEmailAddress")', function() {
        // TODO: update the code to test the property fromEmailAddress
        expect(instance).to.have.property('fromEmailAddress');
        // expect(instance.fromEmailAddress).to.be(expectedValueLiteral);
      });

      it('should have the property toEmailAddress (base name: "ToEmailAddress")', function() {
        // TODO: update the code to test the property toEmailAddress
        expect(instance).to.have.property('toEmailAddress');
        // expect(instance.toEmailAddress).to.be(expectedValueLiteral);
      });

      it('should have the property subject (base name: "Subject")', function() {
        // TODO: update the code to test the property subject
        expect(instance).to.have.property('subject');
        // expect(instance.subject).to.be(expectedValueLiteral);
      });

      it('should have the property htmlBody (base name: "HtmlBody")', function() {
        // TODO: update the code to test the property htmlBody
        expect(instance).to.have.property('htmlBody');
        // expect(instance.htmlBody).to.be(expectedValueLiteral);
      });

      it('should have the property allowLowReputationSenders (base name: "AllowLowReputationSenders")', function() {
        // TODO: update the code to test the property allowLowReputationSenders
        expect(instance).to.have.property('allowLowReputationSenders');
        // expect(instance.allowLowReputationSenders).to.be(expectedValueLiteral);
      });

      it('should have the property allowSanctioned (base name: "AllowSanctioned")', function() {
        // TODO: update the code to test the property allowSanctioned
        expect(instance).to.have.property('allowSanctioned');
        // expect(instance.allowSanctioned).to.be(expectedValueLiteral);
      });

      it('should have the property inputEmailFile (base name: "InputEmailFile")', function() {
        // TODO: update the code to test the property inputEmailFile
        expect(instance).to.have.property('inputEmailFile');
        // expect(instance.inputEmailFile).to.be(expectedValueLiteral);
      });

    });
  });

}));
